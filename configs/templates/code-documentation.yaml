# Code Documentation Processing Template
# Optimized for processing code documentation, API docs, and technical tutorials

pipeline:
  name: "code_documentation"
  version: "1.0.0"
  description: "Processing code documentation and technical tutorials for LLM training"
  
  # Processing settings optimized for code docs
  parallel_processing: true
  max_workers: 6
  batch_size: 100
  
  # Memory management
  max_memory_usage: "3GB"
  streaming_mode: false
  
  # Error handling
  continue_on_error: true
  max_errors: 10
  error_log_file: "logs/code_docs_errors.log"

# Ingestion configuration for code documentation
ingest:
  # Focus on documentation formats
  file_types: ["md", "rst", "txt", "html", "htm", "xhtml", "ipynb", "csv", "json", "jsonl", "tsv", "svg", "pdf", "docx", "epub"]
  
  # Documentation files are typically moderate size
  max_file_size: "20MB"
  min_file_size: "500B"
  
  # Preserve code blocks and formatting
  preserve_code_blocks: true
  preserve_formatting: true
  
  # Markdown processing
  markdown:
    extract_code_blocks: true
    preserve_code_language: true
    extract_headers: true
    extract_links: true
    render_math: false  # Keep LaTeX as-is
  
  # Jupyter notebook processing
  notebook:
    extract_code_cells: true
    extract_markdown_cells: true
    extract_outputs: false
    include_cell_metadata: true
  
  # HTML processing for online docs
  html:
    extract_main_content: true
    preserve_code_blocks: true
    remove_navigation: true
    extract_api_docs: true

# Text cleaning optimized for code documentation
clean:
  # Text normalization - preserve code formatting
  normalization:
    unicode_form: "NFKC"
    fix_encoding: true
    normalize_whitespace: false  # Preserve code indentation
    remove_control_chars: true
  
  # No OCR correction needed for code docs
  ocr_correction:
    enabled: false
  
  # Deduplication with code-aware settings
  deduplication:
    enabled: true
    similarity_threshold: 0.85
    algorithm: "jaccard"
    
    # Code-aware deduplication
    ignore_code_blocks: true
    ignore_whitespace_differences: true
    preserve_unique_examples: true
  
  # Boilerplate removal for documentation
  boilerplate:
    enabled: true
    remove_headers: false  # Keep navigation in docs
    remove_footers: true
    
    # Documentation-specific patterns
    custom_patterns:
      - "Table of Contents"
      - "Generated by.*"
      - "Last updated.*"
      - "Edit this page"
      - "Improve this doc"
      - "Found a typo\\?"
      - "Feedback"
      - "Report an issue"
      - "Star us on GitHub"
      - "Fork on GitHub"
      - "Download PDF"
      - "Print this page"
      - "Share on.*"
      - "Previous: .*"
      - "Next: .*"
      - "Back to top"
      - "Skip to content"
    
    # Preserve code-related content
    preserve_patterns:
      - "```[\\s\\S]*?```"  # Code blocks
      - "`[^`]+`"           # Inline code
      - "\\$\\$[\\s\\S]*?\\$\\$"  # Math blocks
      - "\\$[^$]+\\$"       # Inline math
  
  # HTML cleaning for online documentation
  html:
    remove_tags: true
    preserve_code_blocks: true
    preserve_links: true
    preserve_tables: true
    
    # Keep code-related elements
    preserve_elements:
      - "code"
      - "pre"
      - "kbd"
      - "samp"
      - "var"
  
  # Language detection
  language:
    detect_language: true
    confidence_threshold: 0.8
    target_languages: ["en"]  # Most code docs are in English
    fallback_language: "en"

# Annotation configuration for code documentation
annotate:
  # Taxonomy classification for technical content
  taxonomy:
    enabled: true
    method: "hybrid"
    confidence_threshold: 0.7
    max_categories: 4
    fallback_category: "general_programming"
    
    # Programming and technology categories
    custom_rules:
      web_development:
        keywords: ["HTML", "CSS", "JavaScript", "React", "Vue", "Angular", "Node.js"]
        patterns: ["\\b(frontend|backend|fullstack|web app)\\b"]
      
      mobile_development:
        keywords: ["iOS", "Android", "React Native", "Flutter", "Swift", "Kotlin"]
        patterns: ["\\b(mobile app|smartphone|tablet)\\b"]
      
      data_science:
        keywords: ["Python", "pandas", "numpy", "scikit-learn", "TensorFlow", "PyTorch"]
        patterns: ["\\b(machine learning|data analysis|ML|AI)\\b"]
      
      devops:
        keywords: ["Docker", "Kubernetes", "AWS", "CI/CD", "deployment", "infrastructure"]
        patterns: ["\\b(containerization|orchestration|cloud)\\b"]
      
      backend_development:
        keywords: ["API", "database", "server", "microservices", "REST", "GraphQL"]
        patterns: ["\\b(backend|server-side|API endpoint)\\b"]
      
      frontend_development:
        keywords: ["UI", "UX", "component", "responsive", "CSS", "JavaScript"]
        patterns: ["\\b(frontend|client-side|user interface)\\b"]
      
      database:
        keywords: ["SQL", "NoSQL", "MongoDB", "PostgreSQL", "MySQL", "Redis"]
        patterns: ["\\b(database|DB|query|schema)\\b"]
      
      security:
        keywords: ["security", "authentication", "authorization", "encryption", "HTTPS"]
        patterns: ["\\b(cybersecurity|infosec|vulnerability)\\b"]
  
  # Metadata extraction for code documentation
  metadata:
    extract_authors: true
    extract_dates: true
    extract_sources: true
    
    # Code documentation patterns
    author_patterns:
      - "Author[:\\s]+([^\\n]+)"
      - "Maintainer[:\\s]+([^\\n]+)"
      - "Created by[:\\s]+([^\\n]+)"
      - "@author\\s+([^\\n]+)"
    
    # Custom extractors for code docs
    custom_extractors:
      github_repo: "github\\.com/([^/]+/[^/\\s]+)"
      version: "version[:\\s]+([0-9]+\\.[0-9]+(?:\\.[0-9]+)?)"
      license: "license[:\\s]+([^\\n]+)"
      language: "language[:\\s]+([^\\n]+)"
      framework: "framework[:\\s]+([^\\n]+)"
      api_version: "API version[:\\s]+([^\\n]+)"
      last_updated: "last updated[:\\s]+([^\\n]+)"
  
  # Named Entity Recognition for technical content
  ner:
    enabled: true
    model: "en_core_web_sm"
    confidence_threshold: 0.8
    
    entity_types:
      - "PERSON"
      - "ORG"
      - "PRODUCT"
    
    # Technical entities
    custom_entities:
      PROGRAMMING_LANGUAGE: [
        "Python", "JavaScript", "Java", "C++", "C#", "Go", "Rust", "Ruby", "PHP",
        "TypeScript", "Swift", "Kotlin", "Scala", "R", "MATLAB", "SQL"
      ]
      FRAMEWORK: [
        "React", "Vue", "Angular", "Django", "Flask", "Express", "Spring", "Rails",
        "Laravel", "TensorFlow", "PyTorch", "Keras", "scikit-learn"
      ]
      TOOL: [
        "Git", "Docker", "Kubernetes", "Jenkins", "Travis CI", "GitHub Actions",
        "Webpack", "Babel", "ESLint", "Prettier", "Jest", "Mocha"
      ]
      PLATFORM: [
        "AWS", "Azure", "Google Cloud", "Heroku", "Netlify", "Vercel",
        "GitHub", "GitLab", "Bitbucket"
      ]
      DATABASE: [
        "MySQL", "PostgreSQL", "MongoDB", "Redis", "Elasticsearch",
        "SQLite", "Oracle", "SQL Server"
      ]

# Quality control for code documentation
quality:
  enabled: true
  min_score: 0.4  # Lower threshold for technical docs
  auto_filter: false  # Manual review recommended
  
  # Quality dimensions
  dimensions:
    content: 0.4
    technical_accuracy: 0.3
    completeness: 0.2
    clarity: 0.1
  
  # Content quality for technical documentation
  content_quality:
    min_length: 100    # Short code snippets are valid
    max_length: 20000  # Long tutorials are common
    check_informativeness: true
    check_coherence: false  # Code docs can be fragmented
    
    # Technical documentation checks
    check_code_completeness: true
    check_example_validity: true
    require_code_examples: false
    check_api_consistency: true
  
  # Technical accuracy
  technical_accuracy:
    check_syntax_highlighting: true
    validate_code_blocks: false  # Would require execution
    check_version_consistency: true
    check_deprecated_features: false
  
  # Completeness checks
  completeness:
    check_prerequisites: true
    check_installation_steps: true
    check_usage_examples: true
    check_troubleshooting: false
  
  # Clarity for technical writing
  clarity:
    check_jargon_explanation: false
    check_step_by_step: true
    check_visual_aids: false
    prefer_active_voice: false

# Export configuration for code documentation
export:
  # Formats suitable for code training
  formats: ["jsonl", "markdown"]
  
  # Include technical metadata
  include_metadata: true
  include_quality_scores: true
  
  # Code-specific fields
  custom_fields:
    - "programming_language"
    - "framework"
    - "version"
    - "github_repo"
    - "license"
    - "api_version"
    - "code_blocks"
    - "examples"
  
  # Preserve code structure
  preserve_code_structure: true
  preserve_markdown_formatting: true
  
  # Data splitting
  splitting:
    enabled: true
    train_ratio: 0.8
    validation_ratio: 0.1
    test_ratio: 0.1
    stratify_by: "programming_language"
    random_seed: 42
  
  # Format settings
  jsonl:
    pretty_print: false
    ensure_ascii: false
    preserve_code_blocks: true
  
  markdown:
    preserve_formatting: true
    include_metadata_header: true

# Code-specific processing settings
code_processing:
  # Code block extraction
  extract_code_blocks: true
  preserve_indentation: true
  detect_language: true
  
  # Supported languages for syntax highlighting
  supported_languages: [
    "python", "javascript", "java", "cpp", "csharp", "go", "rust",
    "ruby", "php", "typescript", "swift", "kotlin", "scala", "r",
    "sql", "html", "css", "bash", "shell", "yaml", "json", "xml"
  ]
  
  # Code validation
  validate_syntax: false  # Would require language-specific parsers
  check_best_practices: false
  
  # Example extraction
  extract_examples: true
  example_patterns:
    - "Example[:\\s]*"
    - "For example[:\\s]*"
    - "Here's how[:\\s]*"
    - "Usage[:\\s]*"
    - "Sample[:\\s]*"

# Logging configuration
logging:
  level: "INFO"
  file: "logs/code_docs.log"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  
  # Code-specific logging
  log_code_extraction: true
  log_language_detection: true
  log_syntax_errors: true

# Performance settings
performance:
  # Code docs can have complex parsing
  timeout_per_document: 120  # 2 minutes
  max_retries: 2
  
  # Memory management
  gc_frequency: 75
  
  # Caching
  enable_caching: true
  cache_directory: ".cache/code_docs"
  cache_ttl: 7200  # 2 hours