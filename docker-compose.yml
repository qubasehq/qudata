# Docker Compose for QuData Development Environment
version: '3.8'

services:
  # Main QuData application
  qudata:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0.1}
        VCS_REF: ${VCS_REF:-}
    container_name: qudata-app
    ports:
      - "8000:8000"  # API server
      - "8001:8001"  # Dashboard
      - "8080:8080"  # Monitoring
    volumes:
      # Application code (for development)
      - .:/app
      # Data directories
      - ./data:/app/data
      - ./configs:/app/configs
      - ./logs:/app/logs
      # Cache directories
      - qudata_cache:/app/.cache
      - qudata_tmp:/app/tmp
    environment:
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      
      # Database connection
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=qudata
      - DB_USER=qudata
      - DB_PASSWORD=qudata_dev_password
      
      # Redis connection
      - REDIS_URL=redis://redis:6379/0
      
      # Performance settings
      - WORKERS=2
      - MAX_WORKERS=4
      - BATCH_SIZE=50
      - MAX_MEMORY=2GB
      
      # API settings
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - ENABLE_CORS=true
      - ENABLE_DOCS=true
      
      # Feature flags
      - ENABLE_GRAPHQL=true
      - ENABLE_WEBHOOKS=true
      - ENABLE_MONITORING=true
      - ENABLE_DASHBOARD=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qudata-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: qudata-postgres
    environment:
      - POSTGRES_DB=qudata
      - POSTGRES_USER=qudata
      - POSTGRES_PASSWORD=qudata_dev_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./docker/postgres.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - qudata-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qudata -d qudata"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    container_name: qudata-redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - qudata-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy (optional for development)
  nginx:
    image: nginx:alpine
    container_name: qudata-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - qudata
    restart: unless-stopped
    networks:
      - qudata-network
    profiles:
      - nginx

  # Elasticsearch for logging (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: qudata-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - qudata-network
    profiles:
      - logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana for log visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: qudata-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qudata-network
    profiles:
      - logging

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: qudata-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - qudata-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: qudata-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - qudata-network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  qudata_cache:
    driver: local
  qudata_tmp:
    driver: local

# Custom network
networks:
  qudata-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16